# -*- coding: utf-8 -*-
"""clip_pc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bjycMqi2pKu0Ds89jmnYFLGGW-mZ3aK6
"""

import os
from collections import defaultdict
from PIL import Image, UnidentifiedImageError
import numpy as np
import torch
import clip
import json

# Load the class mapping from the provided JSON file
def load_category_mapping(mapping_path):
    """Load category mapping from a JSON file."""
    with open(mapping_path, 'r') as f:
        category_mapping = json.load(f)
    sorted_categories = sorted(category_mapping.values(), key=lambda value: value[0])
    category_list = [
        value[1].replace('_', ' ').replace('-', ' ').replace('/', ' or ').lower()
        for value in sorted_categories
    ]
    return category_list

# Initialize the CLIP model and image processor
model_name = 'ViT-B/32'
model, preprocess = clip.load(model_name, device="cuda")

# ----------- working till this point ------------------#

# Path to the main folder containing subfolders of corruption types
main_folder_path = '/content/drive/MyDrive/corruptions'
mapping_path = 'preprocessing/imgnet_d_dir2imgnet_d_id.txt'  # Replace with your mapping file

# Load category mapping
category_list = load_category_mapping(mapping_path)

# Prepare text embeddings
text_inputs = torch.cat([clip.tokenize(f"A photo of a {c}") for c in category_list]).to("cuda")
with torch.no_grad():
    text_features = model.encode_text(text_inputs)
text_features /= text_features.norm(dim=-1, keepdim=True)

# Dictionary to track accuracy per corruption type and severity level
corruption_accuracy = defaultdict(lambda: defaultdict(float))
severity_totals = defaultdict(lambda: defaultdict(int))  # Track total images per severity level per corruption

# List to store results and track correct predictions
results = []
total_images = 0
correct_predictions = 0

# Iterate through each corruption type folder
for corruption_folder in os.listdir(main_folder_path):
    corruption_folder_path = os.path.join(main_folder_path, corruption_folder)

    # Ensure it's a directory
    if os.path.isdir(corruption_folder_path):
        # Initialize a dictionary to track total images per severity level within this corruption type
        severity_totals[corruption_folder] = defaultdict(int)

        # Iterate through each severity level folder within the corruption type folder
        for severity_folder in os.listdir(corruption_folder_path):
            severity_folder_path = os.path.join(corruption_folder_path, severity_folder)

            # Ensure it's a directory
            if os.path.isdir(severity_folder_path):
                # Iterate through each ImageNet label ID folder in the severity level folder
                for label_folder in os.listdir(severity_folder_path):
                    label_folder_path = os.path.join(severity_folder_path, label_folder)

                    # Ensure it's a directory
                    if os.path.isdir(label_folder_path):
                        # Count total images in this ImageNet label ID folder
                        total_images_in_label = len(os.listdir(label_folder_path))
                        severity_totals[corruption_folder][severity_folder] += total_images_in_label

                        # Iterate through each image file in the ImageNet label ID folder
                        for img_file in os.listdir(label_folder_path):
                            img_path = os.path.join(label_folder_path, img_file)

                            try:
                                # Load image in PIL (Python Imaging Library) and resize to (224, 224)
                                img = Image.open(img_path).convert('RGB')
                                img = img.resize((224, 224))

                                # Convert PIL Image to 3D NumPy Array
                                img_array = np.array(img)

                                # Prepare the image for the model
                                img_tensor = preprocess(img).unsqueeze(0).to("cuda")

                                # Get features from the model
                                with torch.no_grad():
                                    image_features = model.encode_image(img_tensor)
                                image_features /= image_features.norm(dim=-1, keepdim=True)

                                # Get the predicted class
                                logits = (100.0 * image_features @ text_features.T).softmax(dim=-1)
                                predicted_class_idx = logits.argmax(-1).item()
                                predicted_label = category_list[predicted_class_idx]

                                # Store the results
                                results.append((corruption_folder, severity_folder, label_folder, img_file, predicted_label))

                                # Check if the top prediction matches the actual ImageNet label ID
                                actual_label = os.path.basename(label_folder_path)
                                if predicted_label == actual_label:
                                    correct_predictions += 1
                                    corruption_accuracy[corruption_folder][severity_folder] += 1

                            except (UnidentifiedImageError, OSError) as e:
                                print(f"Error: Cannot identify or open image file {img_path}. Exception: {e}")

                            # Increment total_images count for the specific severity level and corruption type
                            total_images += 1

# Print the results
for corruption_folder, severity_folder, label_folder, img_file, predicted_label in results:
    print(f"Predictions for {corruption_folder}/{severity_folder}/{label_folder}/{img_file}:")
    print(f" - Predicted label: {predicted_label}")
    print()

# Print the accuracy per corruption type and severity level
for corruption_folder in corruption_accuracy:
    print(f"Corruption Type: {corruption_folder}")
    for severity_folder in corruption_accuracy[corruption_folder]:
        total_images_in_severity = severity_totals[corruption_folder][severity_folder]
        if total_images_in_severity > 0:
            accuracy = (corruption_accuracy[corruption_folder][severity_folder] / total_images_in_severity) * 100
            print(f" - Severity Level '{severity_folder}': Accuracy {accuracy:.2f}%")
            print(f"   Total Images: {total_images_in_severity}, Correct Predictions: {corruption_accuracy[corruption_folder][severity_folder]}")
        else:
            print(f" - Severity Level '{severity_folder}': No images found.")
    print()
