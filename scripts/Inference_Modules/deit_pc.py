# -*- coding: utf-8 -*-
"""deiT_pc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y381N4mHAgaFm-mQzchMIxwJTKijbhc_
"""

import os
from collections import defaultdict
from PIL import UnidentifiedImageError
import numpy as np
from transformers import DeiTForImageClassificationWithTeacher, AutoImageProcessor
import torch
import requests

# Load the class mapping from the provided URL
synset_url = "https://raw.githubusercontent.com/torch/tutorials/master/7_imagenet_classification/synset_words.txt"
response = requests.get(synset_url)
synset_words = response.text.strip().split('\n')

# Create a mapping from class indices to ImageNet labels and human-readable names
idx_to_label = {}
for idx, line in enumerate(synset_words):
    parts = line.split(' ', 1)
    idx_to_label[idx] = parts[0]  # ImageNet label ID

# Initialize the DeiT model and image processor
model_name = 'facebook/deit-base-distilled-patch16-224'
model = DeiTForImageClassificationWithTeacher.from_pretrained(model_name)
image_processor = AutoImageProcessor.from_pretrained(model_name)

# Path to the main folder containing subfolders of corruption types
main_folder_path = '/content/drive/MyDrive/corruptions'

# Dictionary to track accuracy per corruption type and severity level
corruption_accuracy = defaultdict(lambda: defaultdict(float))
severity_totals = defaultdict(lambda: defaultdict(int))  # Track total images per severity level per corruption

# List to store results and track correct predictions
results = []
total_images = 0
correct_predictions = 0

# Iterate through each corruption type folder
for corruption_folder in os.listdir(main_folder_path):
    corruption_folder_path = os.path.join(main_folder_path, corruption_folder)

    # Ensure it's a directory
    if os.path.isdir(corruption_folder_path):
        # Initialize a dictionary to track total images per severity level within this corruption type
        severity_totals[corruption_folder] = defaultdict(int)

        # Iterate through each severity level folder within the corruption type folder
        for severity_folder in os.listdir(corruption_folder_path):
            severity_folder_path = os.path.join(corruption_folder_path, severity_folder)

            # Ensure it's a directory
            if os.path.isdir(severity_folder_path):
                # Iterate through each ImageNet label ID folder in the severity level folder
                for label_folder in os.listdir(severity_folder_path):
                    label_folder_path = os.path.join(severity_folder_path, label_folder)

                    # Ensure it's a directory
                    if os.path.isdir(label_folder_path):
                        # Count total images in this ImageNet label ID folder
                        total_images_in_label = len(os.listdir(label_folder_path))
                        severity_totals[corruption_folder][severity_folder] += total_images_in_label

                        # Iterate through each image file in the ImageNet label ID folder
                        for img_file in os.listdir(label_folder_path):
                            img_path = os.path.join(label_folder_path, img_file)

                            try:
                                # Load image in PIL (Python Imaging Library) and resize to (224, 224)
                                img = image.load_img(img_path, color_mode='rgb', target_size=(224, 224))

                                # Convert PIL Image to 3D NumPy Array
                                img_array = image.img_to_array(img)

                                # Prepare the image for the model
                                inputs = image_processor(images=img_array, return_tensors="pt")

                                # Get features from the model
                                with torch.no_grad():
                                    outputs = model(**inputs)

                                # Get the predicted class
                                logits = outputs.logits
                                predicted_class_idx = logits.argmax(-1).item()
                                predicted_label = idx_to_label[predicted_class_idx]

                                # Store the results
                                results.append((corruption_folder, severity_folder, label_folder, img_file, predicted_label))

                                # Check if the top prediction matches the actual ImageNet label ID
                                actual_label = os.path.basename(label_folder_path)
                                if predicted_label == actual_label:
                                    correct_predictions += 1
                                    corruption_accuracy[corruption_folder][severity_folder] += 1

                            except (UnidentifiedImageError, OSError) as e:
                                print(f"Error: Cannot identify or open image file {img_path}. Exception: {e}")

                            # Increment total_images count for the specific severity level and corruption type
                            total_images += 1

# Print the results
for corruption_folder, severity_folder, label_folder, img_file, predicted_label in results:
    print(f"Predictions for {corruption_folder}/{severity_folder}/{label_folder}/{img_file}:")
    print(f" - Predicted label: {predicted_label}")
    print()

# Print the accuracy per corruption type and severity level
for corruption_folder in corruption_accuracy:
    print(f"Corruption Type: {corruption_folder}")
    for severity_folder in corruption_accuracy[corruption_folder]:
        total_images_in_severity = severity_totals[corruption_folder][severity_folder]
        if total_images_in_severity > 0:
            accuracy = (corruption_accuracy[corruption_folder][severity_folder] / total_images_in_severity) * 100
            print(f" - Severity Level '{severity_folder}': Accuracy {accuracy:.2f}%")
            print(f"   Total Images: {total_images_in_severity}, Correct Predictions: {corruption_accuracy[corruption_folder][severity_folder]}")
        else:
            print(f" - Severity Level '{severity_folder}': No images found.")
    print()