# -*- coding: utf-8 -*-
"""Xception.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19F0CrMA8kj2wqEVQF42JYQb56dUjQF5F
"""

import os
from collections import defaultdict
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.xception import Xception, preprocess_input, decode_predictions
from PIL import UnidentifiedImageError
import numpy as np

# Initialize the Xception model
model = Xception(weights='imagenet')

# Path to the main folder containing subfolders of corruption types
main_folder_path = '/content/drive/MyDrive/corruptions'

# Dictionary to track accuracy per corruption type and severity level
corruption_accuracy = defaultdict(lambda: defaultdict(float))
severity_totals = defaultdict(lambda: defaultdict(int))  # Track total images per severity level per corruption

# List to store results and track correct predictions
results = []
total_images = 0
correct_predictions = 0

# Iterate through each corruption type folder
for corruption_folder in os.listdir(main_folder_path):
    corruption_folder_path = os.path.join(main_folder_path, corruption_folder)

    # Ensure it's a directory
    if os.path.isdir(corruption_folder_path):
        # Initialize a dictionary to track total images per severity level within this corruption type
        severity_totals[corruption_folder] = defaultdict(int)

        # Iterate through each severity level folder within the corruption type folder
        for severity_folder in os.listdir(corruption_folder_path):
            severity_folder_path = os.path.join(corruption_folder_path, severity_folder)

            # Ensure it's a directory
            if os.path.isdir(severity_folder_path):
                # Iterate through each ImageNet label ID folder in the severity level folder
                for label_folder in os.listdir(severity_folder_path):
                    label_folder_path = os.path.join(severity_folder_path, label_folder)

                    # Ensure it's a directory
                    if os.path.isdir(label_folder_path):
                        # Count total images in this ImageNet label ID folder
                        total_images_in_label = len(os.listdir(label_folder_path))
                        severity_totals[corruption_folder][severity_folder] += total_images_in_label

                        # Iterate through each image file in the ImageNet label ID folder
                        for img_file in os.listdir(label_folder_path):
                            img_path = os.path.join(label_folder_path, img_file)

                            try:
                                # Load image in PIL (Python Imaging Library) and resize to (299, 299)
                                img = image.load_img(img_path, color_mode='rgb', target_size=(299, 299))

                                # Convert PIL Image to 3D NumPy Array
                                x = image.img_to_array(img)

                                # Add the fourth dimension, for the number of images
                                x = np.expand_dims(x, axis=0)

                                # Preprocess the input image
                                x = preprocess_input(x)

                                # Get features from the model
                                features = model.predict(x)

                                # Decode predictions
                                p = decode_predictions(features, top=3)[0]

                                # Store the results
                                results.append((corruption_folder, severity_folder, label_folder, img_file, p))

                                # Check if the top prediction matches the actual ImageNet label ID
                                actual_label = os.path.basename(label_folder_path)
                                if p[0][0] == actual_label:
                                    correct_predictions += 1
                                    corruption_accuracy[corruption_folder][severity_folder] += 1

                            except UnidentifiedImageError:
                                print(f"UnidentifiedImageError: Cannot identify image file {img_path}")
                            except Exception as e:
                                print(f"Error processing {img_path}: {e}")

                            # Increment total_images count for the specific severity level and corruption type
                            total_images += 1

# Print the results
for corruption_folder, severity_folder, label_folder, img_file, preds in results:
    print(f"Predictions for {corruption_folder}/{severity_folder}/{label_folder}/{img_file}:")
    for pred in preds:
        print(f" - {pred[0]} ({pred[1]}): {pred[2]*100:.2f}%")
    print()

# Print the accuracy per corruption type and severity level
for corruption_folder in corruption_accuracy:
    print(f"Corruption Type: {corruption_folder}")
    for severity_folder in corruption_accuracy[corruption_folder]:
        total_images_in_severity = severity_totals[corruption_folder][severity_folder]
        if total_images_in_severity > 0:
            accuracy = (corruption_accuracy[corruption_folder][severity_folder] / total_images_in_severity) * 100
            print(f" - Severity Level '{severity_folder}': Accuracy {accuracy:.2f}%")
            print(f"   Total Images: {total_images_in_severity}, Correct Predictions: {corruption_accuracy[corruption_folder][severity_folder]}")
        else:
            print(f" - Severity Level '{severity_folder}': No images found.")
    print()

